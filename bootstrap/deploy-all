#!/bin/bash

ME=$(basename "$0")
! cd "$(dirname "$0")" && echo "Could not cd to script directory" && exit 1

[ ! -d ~/.rnode ] && echo "
$ME: $HOME/.rnode does not exist. Use 'bootstrap' to fix.
" && exit 1

! ./stop-rnode && exit $?

./list-snapshot |grep "rgov" > /dev/null && echo "$ME: snapshot rgov already exists." && while read -r -p "Use it instead of re-running deploy [y]? " response;do
   if [ "$response" == 'y' ] || [ -z "$response" ];then
      ./restore-snapshot "rgov"
      exit 0
   else
      echo "$ME: Re-running deploy"
      break
   fi
done

private_key=$(cat PrivateKeys/pk.bootstrap)

ERRORLOG="$(mktemp /tmp/"$ME".XXXXXX)"
LOGFILE="log/$ME.log"
rm -f "$ERRORLOG"
DEPLOY="./deploy --error $ERRORLOG"

mkdir -p generated log

# Get everything, including system classes
git clone https://github.com/rchain/rchain.git || (cd rchain && git pull)

# Updating our local source should be an option -- look into the wisdom of this
#git pull https://github.com/rchain-community/liquid-democracy.git

rnode run -s \
   --validator-private-key "$private_key" \
   --dev-mode \
   -XX:MaxDirectMemorySize=100m -XX:MaxRAMPercentage=25 \
   > "$LOGFILE" 2>&1 &


PID=$!

# The previous command doesn't produce output -- but this makes up for that
tail -F "$LOGFILE"|sed -e '/Making a transition to Running state./q' | sed "s/^/$ME: /"

deployFiles() {
   WAITPID=""
   while read -r t;do
      $DEPLOY "$t"
      # shellcheck disable=SC2030
      WAITPID="$WAITPID $!"
   done |tee -a log/deployment.log 2>&1
   # shellcheck disable=SC2031,SC2086
   wait $WAITPID
   echo "$ME: done status $?"
}

# deploy rchain code
find rchain -name "*.rho"|grep -v "test"|grep -v "tests" |grep -v "examples" | deployFiles

if [ -f "$ERRORLOG" ]; then
   echo "$ME: error:";
   cat "$ERRORLOG";
   rm -f "$ERRORLOG";
   exit 2;
fi

# deploy rgov core
find ../rholang/core -name "*.rho" | deployFiles

# deploy rchain voters
echo ./voter-insertion.rho | deployFiles

if [ -f "$ERRORLOG" ]; then
   echo "$ME: DeployFiles error:";
   cat "$ERRORLOG";
   rm -f "$ERRORLOG";
   exit 2;
fi

# Finalize the rnode
echo "$ME: Proposing...." | tee -a log/deployment.log
rnode --grpc-port 40402 propose 2>&1 | tee -a log/deployment.log
echo "$ME: Propose finished."

# generate and create the master contract directory
echo "$ME: Generating generated/generated.create-master-contract-directory.rho"
./master-contract-directory > generated/generated.create-master-contract-directory.rho

echo "generated/generated.create-master-contract-directory.rho"| deployFiles | tee -a log/create-master-directory.log
echo "$ME: Proposing generated/generated.create-master-contract-directory.rho" |tee -a log/create-master-directory.log
rnode --grpc-port 40402 propose 2>&1 | tee -a log/deployment.log

echo "$ME: Creating MasterURI.localhost.json"
echo "{\"localhostNETWORK\": { \"MasterURI\":" > ../src/MasterURI.localhost.json
grep "ReadcapURI" "$LOGFILE" |tail -1 | cut -d' ' -f3|sed '
s/\}/"/
s/^/"/
'>> ../src/MasterURI.localhost.json
echo "}}" >> ../src/MasterURI.localhost.json

# double-check the directory was created.
echo "$ME: listing master directory"
./deploy listMasterURI.rho
rnode --grpc-port 40402 propose 2>&1 | tee -a log/deployment.log

# deploy rholang 'features' that depend on core
find ../rholang/feature -name "*.rho" | deployFiles
rnode --grpc-port 40402 propose 2>&1 | tee -a log/deployment.log

echo "$ME: Waiting for rnode to finalize (10s)" && sleep 10 && echo "$ME: Stopping deployment rnode"
kill $PID && sleep 2

echo "$ME: Creating rgov snapshot"
./create-snapshot rgov
stty echo # for some reason, deploy screws up the terminal, so set it right
