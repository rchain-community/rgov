new return(`rho:rchain:deployId`),
deployerId(`rho:rchain:deployerId`),
trace(`rho:io:stdout`),
lookup(`rho:registry:lookup`), valueCh, loop in {
  for (@{"read": *MCA, ..._} <<- @[*deployerId, "MasterDictionary"]) {
    trace!({"MCA": *MCA}) |
    MCA!("Roll", *valueCh) |
    for (@value <- valueCh) {
      match("1111Wbd8KLeWBVsxByF9iksJ4QRRjEF3nq1ScgAw7bMbtomxHsqqd", 100000000000, value) {
        (revAddrFrom, amount, toAddrs) => {
          new loop, RevVaultCh in {
            new ret, loop in {
              lookup!(`rho:rchain:revVault`, *RevVaultCh) |
              for (@(_, RevVault) <- RevVaultCh ) {
                new vaultCh, revVaultkeyCh
                in {
                  @RevVault!("findOrCreate", revAddrFrom, *vaultCh) |
                  @RevVault!("deployerAuthKey", *deployerId, *revVaultkeyCh) |
                  for (@vault <- vaultCh; key <- revVaultkeyCh) {
                    match vault {
                      (true, vault) => {
                        loop!(value)|
                        contract loop (set) = {
                          match ( *set ) {
                            Set(revAddrTo, ...rest) => {
                              new vaultTo in {
                                @RevVault!("findOrCreate", revAddrTo, *vaultTo) |
                                for (_ <- vaultTo) {
                                  @vault!("transfer", revAddrTo, amount, *key, *return)
                                } |
                                return!(revAddrTo)
                              } |
                              loop!(rest)
                            }
                          }
                          
                        }
                        // err => {
                          //     return!((false, "REV vault cannot be found or created."))
                          // }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
