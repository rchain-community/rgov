match [
   `rho:id:o9b5otixodhpkxgtbsz1ja5sak43gdhei69ukc9swp355qi8dkm3n7` // directory
   , `rho:id:yupw4m3mfjn9smxtsja5igqqdxyqpnjzjg16aqzdwhzcbqkhxz8f5n`
   ,`rho:id:fqfifaqpwp9o4joyybmg9w8iiczfcyq8f66br9zmg8fqompigccgju` // Inbox done
   ,`rho:id:urj8148w4ufm8mw8kgz6kddb97bccezk98won98aw11coxdnwn6sr1` // Issue done
   ,`rho:id:eifmzammsbx8gg5fjghjn34pw6hbi6hqep7gyk4bei96nmra11m4hi` //kudos
   ,`rho:id:kiijxigqydnt7ds3w6w3ijdszswfysr3hpspthuyxz4yn3ksn4ckzf` // roll

   ,`rho:id:fbjgow69qme33wk9jwhbjd8ofy36w7gjyup6gfc5d3tsfwfq8s4144`
]{[
   URI_Directory
   ,URI_Echo
   ,URI_Inbox
   ,URI_Issue
   ,URI_Kudos
   ,URI_Roll
   ,URI_Log
] => {
   new
      lookup(`rho:registry:lookup`)
      ,deployerId(`rho:rchain:deployerId`)
      ,deployId(`rho:rchain:deployId`)
      ,stdout(`rho:io:stdout`)
      ,insertArbitrary(`rho:registry:insertArbitrary`)
      ,lookCh
      ,insertCh
      ,caps
      ,lastUri
      ,lookCh_Directory
      ,ret_Directory
      ,final_Directory
      ,lookCh_Echo
      ,ret_Echo
      ,final_Echo
      ,lookCh_Inbox
      ,ret_Inbox
      ,final_Inbox
      ,lookCh_Issue
      ,ret_Issue
      ,final_Issue
      ,lookCh_Kudos
      ,ret_Kudos
      ,final_Kudos
      ,lookCh_Roll
      ,ret_Roll
      ,final_Roll
      ,lookCh_Log
      ,ret_Log
      ,final_Log
   in {
      lookup!(URI_Directory, *lookCh)
      | for (Dir <- lookCh) {
         Dir!(*caps)
         | for (@{"read": read, "write": write, "grant": grant} <- caps) {
   
            // Create a global reference to the master contract directory
            @[*deployerId, "MasterDictionary"]!({"read": read, "write": write, "grant": grant})
            | insertArbitrary!(read, *insertCh)
            | for (URI <- insertCh) {
               stdout!({ "ReadcapURI": *URI})
               | deployId!({ "ReadcapURI": *URI })
            }
            // insert the Directory class
            | lookup!(URI_Directory, *lookCh_Directory)
            | for (C_Directory <- lookCh_Directory) {
               stdout!(["writing class to dictionary: Directory ", URI_Directory, *C_Directory])
               | @write!("Directory", *C_Directory, *ret_Directory)
            }
            // insert the Echo class
            | lookup!(URI_Echo, *lookCh_Echo)
            | for (C_Echo <- lookCh_Echo) {
               stdout!(["writing class to dictionary: Echo ", URI_Echo, *C_Echo])
               | @write!("Echo", *C_Echo, *ret_Echo)
            }
            // insert the Inbox class
            | lookup!(URI_Inbox, *lookCh_Inbox)
            | for (C_Inbox <- lookCh_Inbox) {
               stdout!(["writing class to dictionary: Inbox ", URI_Inbox, *C_Inbox])
               | @write!("Inbox", *C_Inbox, *ret_Inbox)
            }
            // insert the Issue class
            | lookup!(URI_Issue, *lookCh_Issue)
            | for (C_Issue <- lookCh_Issue) {
               stdout!(["writing class to dictionary: Issue ", URI_Issue, *C_Issue])
               | @write!("Issue", *C_Issue, *ret_Issue)
            }
            // insert the Kudos class
            | lookup!(URI_Kudos, *lookCh_Kudos)
            | for (C_Kudos <- lookCh_Kudos) {
               stdout!(["writing class to dictionary: Kudos ", URI_Kudos, *C_Kudos])
               | @write!("Kudos", *C_Kudos, *ret_Kudos)
            }
            // insert the Roll class
            | lookup!(URI_Roll, *lookCh_Roll)
            | for (C_Roll <- lookCh_Roll) {
               stdout!(["writing class to dictionary: Roll ", URI_Roll, *C_Roll])
               | @write!("Roll", *C_Roll, *ret_Roll)
            }
            // insert the Log class
            | lookup!(URI_Log, *lookCh_Log)
            | for (C_Log <- lookCh_Log) {
               stdout!(["writing class to dictionary: Log ", URI_Log, *C_Log])
               | @write!("Log", *C_Log, *ret_Log)
            }
            }
            |  for ( 
                  final_Directory <- ret_Directory;
                  final_Echo <- ret_Echo;
                  final_Inbox <- ret_Inbox;
                  final_Issue <- ret_Issue;
                  final_Kudos <- ret_Kudos;
                  final_Roll <- ret_Roll;
                  final_Log <- ret_Log;
                  last <- lastUri
               )
               {  stdout!(["Finished with ReadcapURI", *last])
               |  stdout!(["Finished with Directory", *final_Directory])
               |  stdout!(["Finished with Echo", *final_Echo])
               |  stdout!(["Finished with Inbox", *final_Inbox])
               |  stdout!(["Finished with Issue", *final_Issue])
               |  stdout!(["Finished with Kudos", *final_Kudos])
               |  stdout!(["Finished with Roll", *final_Roll])
               |  stdout!(["Finished with Log", *final_Log])
         }
      }
   }
} // end of =>
} // end of match
