new
   cliChannel,
   everyoneMap, // TODO treeHashMap
   getMe,
   createMe,
   sendThem,
   insertArbitrary(`rho:registry:insertArbitrary`),
   stdout(`rho:io:stdout`),
   deployerId(`rho:rchain:deployerId`),
   mcaUpdateRet1,
   mcaUpdateRet2,
   uriCh
in { Nil
|  everyoneMap!({}) // TODO treeHashMap
// TODO migrate old member directory if it exists
|  for (@{"read": *MCAread, ..._} <<- @[*deployerId, "MasterDictionary"]) { Nil
   |  stdout!(["MCAread", *MCAread])
   |  contract createMe(you, yourStuff, retCh, logCh) = { Nil
      |  logCh!(["creating you", *you, "with your stuff", *yourStuff])
      |  for (everyone <- everyoneMap) { Nil
         |  logCh!(["everyone size", *everyone.size()])
         |  everyoneMap!(*everyone.set(*you, *yourStuff))
         |  retCh!((true, Nil))
         }
      }
   |  new inboxCh, dirCh, inboxStuff, dirStuff, insertCh, uriCh in { Nil
      |  contract createMe(you, retCh, logCh) = { Nil
         |  logCh!(["creating your stuff", *you])
         |  MCAread!("Inbox", *inboxCh)
         |  MCAread!("Directory", *dirCh)
         |  for (inboxCreation <- inboxCh; dirCreation <- dirCh) { Nil
            |  logCh!(["inbox creation", *inboxCreation, "dir creation", *dirCreation])
            |  inboxCreation!(*inboxStuff)
            |  dirCreation!(*MCAread, *dirStuff)
            }
         |  for (@read, @write, @peek <- inboxStuff; dirMap <- dirStuff) { Nil
            |  logCh!(["read", read, "write", write, "peek", peek, "dirMap", *dirMap])
            |  insertArbitrary!(write, *uriCh)
            |  for (@uri <- uriCh) { Nil
               |  createMe!(
                     *you,
                     {
                        "inbox": {"receive": read, "inbox": write, "peek": peek, "URI": uri, "dict": *dirMap.get("read")},
                        "dictionary": *dirMap,
                        "claimed": false
                     },
                     *insertCh,
                     *logCh
                  )
               }
            }
         |  for (_ <- insertCh) { Nil
            |  retCh!((true,Nil))
            }
         }
      }
}
// This contract cannot fail. If you do not exist, you are created -- do you get me? :)
|  new deployerRevAddr, RevAddress(`rho:rev:address`) in { Nil
   |  contract deployerRevAddr(@memberDeployerId, return, log) = { Nil
      |  new revAddrCh, deployerPubKeyBytesCh, DeployerIdOps(`rho:rchain:deployerId:ops`) in { Nil
      |  log!(["getting deployer rev address"])
      |  DeployerIdOps!("pubKeyBytes", memberDeployerId, *deployerPubKeyBytesCh)
      |  for (@deployerPubKeyBytes <- deployerPubKeyBytesCh) { Nil
         |  log!(["got pub key", deployerPubKeyBytes])
         |  RevAddress!("fromPublicKey", deployerPubKeyBytes, *revAddrCh)
         |  for (@deployerRevAddr <- revAddrCh) { Nil
            |  log!(["got revaddr", {"deployer REV address": deployerRevAddr, "pubKeyBytes": deployerPubKeyBytes, "deployerId": memberDeployerId}])
            |  return!((true, deployerRevAddr))
            }
         }
      }
   }
|  new you, youCh, createCh in { Nil
   |  contract getMe(@deployerId, retCh, logCh) = { Nil
   |  deployerRevAddr!(deployerId, *youCh, *logCh)
   |  for (@(true, you) <- youCh) { for (@everyone <<- everyoneMap) { Nil
      |  logCh!(["getMe", you, "everyone size", everyone.size()])
      |  if (everyone.contains(you) == false ) { Nil
         |  logCh!(["you don't exist", you])
         |  createMe!(you, *createCh, *logCh)
         |  for (_ <- createCh) { Nil
            |  for (@everyone <- everyoneMap) { Nil
               |  logCh!(["your inserted stuff", everyone.get(you),"everyone size", everyone.size()])
               |  @[deployerId, "my rgov"]!(everyone.get(you))
               |  everyoneMap!(everyone.set(
                     you,
                     everyone.get(you).set("claimed", true)
                  ))
               |  for (@everyone <<- everyoneMap) { Nil
                  |  retCh!((true, (false, everyone.get(you).set("claimed", false))))
                  }
               }
            }
         }  else { Nil
         |  logCh!(["returning your stuff", you])
         |  if (everyone.get(you).get("claimed") == true) { Nil
            |  retCh!((true, (true, everyone.get(you))))
            } else { Nil
            |  for (@everyone <- everyoneMap) { Nil
               |  everyoneMap!(everyone.set(
                     you,
                     everyone.get(you).set("claimed", true)
                  ))
               |  for (@everyone <<- everyoneMap) { Nil
                  |  retCh!((true, (false, everyone.get(you))))
                  }
               }
            }
         }
      }}
   |  for (@(false, {error}) <- youCh) { Nil
      |  retCh!((false, error.set("this", "that")))
      }
   }
}
|  new createCh, ackCh in { Nil
   |  contract sendThem(@themRevList, @something, logCh) = { new resultCh in { Nil
   |  logCh!(["sendThem", themRevList, something])
   |  match themRevList {
         [] => { Nil
         |  logCh!("looping done")
         |  resultCh!((true, {}))
         }
         [themRevAddr, ...rest] => { Nil
         |  for (@(my_tf, my_r) <- ackCh) { Nil
            |  logCh!(["ack", my_r])
            |  sendThem!(rest, something, *logCh)
            }
         |  new sendCh, themCh, inboxCh, writeCh in { Nil
            |  for (@everyone <<- everyoneMap) { Nil
               |  if (everyone.contains(themRevAddr) == false) { Nil
                  |  createMe!(themRevAddr, *createCh, *logCh)
                  |  for (_ <- createCh) { Nil
                     | logCh!(["create finished"])
                     |  for (@everyone <<- everyoneMap) { Nil
                        |  logCh!(["got everyone size", everyone.size(), everyone.get(themRevAddr)])
                        |  @{everyone.get(themRevAddr).get("inbox").get("inbox")}!(something, *sendCh)
                        |  for (result <- sendCh) { Nil
                           |  logCh!(["got result 1", *result])
                           |  ackCh!((true, {}.set(themRevAddr, *result)))
                           }
                        }
                     }
                  } else { Nil
                  |  @{everyone.get(themRevAddr).get("inbox").get("inbox")}!(something, *sendCh)
                  |  for (@result <- sendCh) { Nil
                     |  logCh!(["got result 2", result])
                     |  ackCh!((true, {}.set(themRevAddr, result)))
                     }
                  }
               }
            }
         }
      }
   }
}
|  new
      ret1,
      tmp1,
      ret2
   in { Nil
   |  for (@{"write": *MCAwrite, ..._} <<- @[*deployerId, "MasterDictionary"]) { Nil
      |  MCAwrite!("GetMe", bundle+{*getMe}, *mcaUpdateRet1)
      |  MCAwrite!("SendThem", bundle+{*sendThem}, *mcaUpdateRet2)
      |  for (@one <- mcaUpdateRet1; @two <- mcaUpdateRet2) { Nil
         |  stdout!(["GetMe", one, "SendThem", two])
         |  getMe!(*deployerId, *ret1, *stdout)|
         for ( @(tf,(tf2,*x)) <<- ret1) {
            stdout!(["x",*x])|
            stdout!(["inbox", *x.get("inbox")])
         |  for (@(tf, (tf2, {"inbox": inbox, "dictionary": dict, ..._})) <- ret1) { Nil
            |  stdout!(["writing inbox and dictionary for bootstrap", inbox, dict])
            |  @[*deployerId, "inbox"]!(inbox)
            |  @[*deployerId, "dictionary"]!(dict)
            |  sendThem!(["1111NkGJcLb9UdKg27bE1MXhaXwd2Sdhssn3i3EcWnZy11VLyW3zH", "two", "three"], "something", *stdout)
            }}
         }
      }
   }
}
}
} // end of global in
