new 
  cliChannel,
  Inbox,
  deployId,
  lookup(`rho:registry:lookup`),
  stdout(`rho:io:stdout`) in {
stdout!("begin") |

/**
 * Create an Inbox, i.e. a store of messages.
 *
 * A message conventionally matches [String, String, ...] representing
 * a type such as "chat", a subtype such as "myusername". The type and
 * subtype should clarify the structure of the remaining items in the list.
 * For example, "chat" may indicate that ... is a String that is the
 * body of the chat message.
 *
 * Note that messages are stored in a rholang par (parallel) structure, unordered.
 *
 * @returns {(read, write, peek)} a 3 tuple;
 *   `write` may be shared widely; the holder can write (add) a message to the store
 *   `peek` should be held closely; the holder can look at received messages
 *   `read` should be held closely; the holder can look at and remove messages
 */
contract Inbox(capabilities) = {
  new read, write, peek, box in {
    stdout!(["Inbox returning", bundle+{*read}, bundle+{*write}, bundle+{*peek}]) |
    capabilities!(bundle+{*read}, bundle+{*write}, bundle+{*peek}) |
    box!(Nil) |

    /**
     * Read (and remove) all messages.
     * @returns { msg1 | msg2 | msg3, ... }
     */
    contract read(ret) = {
      for (items <- box) {
        ret!(*items)
      }
    } |
    /**
     * Read (and remove) one message by type.
     *
     * @param {*} type - value to be matched against the type of each item
     * @returns { [type, ...rest] } a matching item, if there is one, or Nil
     */
    contract read(type,ret) = {
      //stdout!(["type",*type]) |
      for (items <- box) {
        match (*items) {
          {[=*type, ...item] | rest} => {
            //stdout!(item) |
            ret!(item) |
            box!(rest)
          }
          _ => {box!(*items) | ret!(Nil) | stdout!([*type,"not found"])}
        }
      }
    } |
    /**
     * Read (and remove) one message by type and subtype.
     *
     * @param {*} type - value to be matched against the type of each item
     * @param {*} subtype - value to be matched against the subtype of each item
     * @returns { [type, subtype, ...rest] } a matching item, if there is one, or Nil
     */
    contract read(type,subtype,ret) = {
      //stdout!(["type",*type]) |
      for (items <- box) {
        match (*items) {
          {[=*type, =*subtype, ...item] | rest} => {
            //stdout!(item) |
            ret!(item) |
            box!(rest)
          }
          _ => {
            box!(*items)|ret!(Nil) | stdout!([*type, *subtype, "not found"])
          }
        }
      }
    } |
    /**
     * Peek at (read without removing) all messages.
     * @returns { msg1 | msg2 | msg3, ... }
     */
    contract peek(ret) = {
      for (items <<- box) {
        ret!(*items)
      }
    } |
    /**
     * Peek at (read without removing) one message by type.
     *
     * @param {*} type - value to be matched against the type of each item
     * @returns { [type, ...rest] } a matching item, if there is one, or Nil
     */
    contract peek(type,ret) = {
      //stdout!(["type",*type]) |
      for (items <<- box) {
        match (*items) {
        // ... |["chat", "joes rev addr", {"date":222222 "content": "hello from joe" }] | ...
          {[=*type, ...rest] | tail} => {
            //stdout!(rest) |
            ret!(rest)
          }
          _ => { ret!(Nil) | stdout!([*type,"not found"])}
        }
      }
    } |
    /**
     * Peek at (read without removing) one message by type and subtype.
     *
     * @param {*} type - value to be matched against the type of each item
     * @param {*} subtype - value to be matched against the subtype of each item
     * @returns { [type, subtype, ...rest] } a matching item, if there is one, or Nil
     */
    contract peek(type,subtype,ret) = {
      //stdout!(["type",*type]) |
      for (items <<- box) {
        match (*items) {
          {[=*type, =*subtype, ...item] | rest} => {
            //stdout!(item) |
            ret!(item)
          }
          _ => {
           ret!(Nil) | stdout!([*type, *subtype, "not found"])
          }
        }
      }
    } |

    /**
     * Write (add) a message to the store.
     *
     * @param {*} message - if message matches an existing message by type and subtype
     * and its body is a map, the new and matched messages are merged. Otherwise,
     * the new message is added to the store in parallel.
     *
     * @returns "added." in the merge case an "sent..." otherwise
     */
    contract write(@message,ret) = {
       for (items <- box) {
         match message {
          [type, subtype, map /\ {a: b, ..._} ] => {
            match *items {
              {[=type, =subtype, oldmap] | more } => {
                box!([type, subtype, map.union(oldmap)] | more) |
           //stdout!([type, subtype, map.union(oldmap)]) |
                ret!("added.")
              }
              _ => {
                box!(*items | message) |
                ret!("sent...")
              }
            }
          }
          _ => {
            //stdout!([*message, *items]) |
            box!(*items | message) |
            ret!("sent.")
          }
        }
      }
    }
  }
} |
new creationCh, lookupCh, lookupCaps, capabilities, ack, ack1, ack2, ack3, ack4, ack5, message, uriCh, ret, insertArbitrary(`rho:registry:insertArbitrary`) in {
  stdout!("hello world") |
  stdout!(["Unforgeable", bundle+{*Inbox}]) |
  insertArbitrary!(bundle+{*Inbox}, *creationCh)|
  for (@uri <- creationCh) {
    stdout!(["#define $Inbox", uri]) |
    cliChannel!(["#define", "Inbox", uri]) |
    deployId!(uri) |
    lookup!(uri, *lookupCh) |
    for (InboxClass <- lookupCh) {
      stdout!(["InboxClass", *InboxClass]) |
      InboxClass!(*lookupCaps) |
      for (x, y, z <- lookupCaps) {
        stdout!(["x", *x, "y", *y, "z", *z])
      }
    }
  } |
  Inbox!(*capabilities) |
  for (receive, send, peek <- capabilities) {
    stdout!(["received capabilities", *receive, *send, *peek]) |
  insertArbitrary!(*send, *uriCh)|
    send!(["values","test", {"a": "b", "b": "c"}], *ack) |
    send!(["chat","myusername" ++ ": Watson come quickly!"], *ack1) |
    send!(["chat","myusername", "Watson come now!"], *ack2) |
    send!(["chat","hello world"], *ack3) |
    for ( uri <- uriCh;  _ <- ack; _ <- ack1; _ <- ack2; _ <- ack3) {
      stdout!(["test inbox",*uri]) | // for testing temprarily
      send!(["values","test", {"a": "x", "c": "d"}], *ret) |
      for ( map <- ret ) {peek!("values","test",*stdout)} |
      //receive!(["chat", _ ], *message) |
      receive!("chat", *message) |
      for ( text <- message ) {
        stdout!(*text)
      } |
      receive!("chat", "myusername", *message) |
      for ( text <- message ) {
        stdout!(*text)
      } |
      receive!("chat", *message) |
      for ( text <- message ) {
        stdout!(*text)
      }
    }
  }
}}
