new deployId(`rho:rchain:deployId`),
MemberDirectory,
regCh,
RevAddress(`rho:rev:address`),
deployerId(`rho:rchain:deployerId`),
lookup(`rho:registry:lookup`),
insertArbitrary(`rho:registry:insertArbitrary`),
deployerRevAddr,
log(`rho:io:stderr`)
in {
  insertArbitrary!(*MemberDirectory, *regCh) | for (@uri <- regCh) { deployId!(uri) }
  |
  contract MemberDirectory(@"makeFromURI", @addrURI, return) = {
    lookup!(addrURI, *regCh) | for (@revAddresses <- regCh) {
      MemberDirectory!("make", revAddresses, *return)
    }
  }
  |
  contract MemberDirectory(@"make", @revAddresses, return) = {
    new self, dirCh in {
      insertArbitrary!(*self, *regCh) | for (@uri <- regCh) {
        return!({"self": *self, "uri": uri})
      }
      |
      match ("import", "./directory.rho", `rho:id:...`) {
        (_, _, directoryURI) => lookup!(directoryURI, *regCh)
      }
      |
      for (Directory <- regCh) {
        new ch in {
          Directory!(*ch) | for (@dir <- ch) {
            dirCh!(dir)
          }
        }
      }
      |
      /**
       * claim a directory entry
       * @param myRevAddr - directory entry key. must match deployerId
       * @param initialContents - should be a map with {"inbox": inbox, ...}
       *   feel free to share any other info about yourself
       * @returns (true, {"selfupdate": writeMyEntry, "read": readDirectory})
       *   or     (false, "whynot")
       */
      contract self(@"claim", @myRevAddr, @initialContents, return) = {
        if (revAddresses.contains(myRevAddr) == false) {
          return!((false, "revAddr not registered"))
        } else {
          new ch in {
            deployerRevAddr!(*ch) | for (@actualRevAddr <- ch) {
              if (myRevAddr == actualRevAddr) {
                for ( @{"read": *read, "write": *write, "grant": *grant, ..._ } <<- dirCh ) {
                  write!(myRevAddr, initialContents, *ch) | for (_ <- ch) {
                    grant!(myRevAddr, *ch) | for (myWrite <- ch) {
                      return!((true, {"read": *read, "selfupdate": *myWrite}))
                    }
                  }
                }
              } else {
                return!((false, "revAddr must match deployer"))
              }
            }
          }
        }
      }
      |
      match ("import", "./inbox.rho", `rho:id:...`) {
        (_, _, inboxURI) => {
          lookup!(inboxURI, *regCh) | for (Inbox <- regCh) {
            /**
            * set up (make mailbox) and claim directory entry
            */
            contract self(@"setup", @myRevAddr, return) = {
              new ch in {
                Inbox!(*ch) | for (read, write, peek <- ch) {
                  insertArbitrary!(*write, *regCh) | for (@myInboxURI <- regCh) {
                    self!("claim", myRevAddr, {"inbox": *write}, *ch) |
                    for(@(true, *selfupdate) <- ch) {
                      return!({
                        "selfupdate": *selfupdate,
                        "read": *read, "write": *write, "peek": *peek, "inboxURI": myInboxURI
                      })
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  |
  contract deployerRevAddr(return) = {
    new revAddrCh, deployerPubKeyBytesCh, DeployerIdOps(`rho:rchain:deployerId:ops`) in {
      DeployerIdOps!("pubKeyBytes", *deployerId, *deployerPubKeyBytesCh) |
      for (@deployerPubKeyBytes <- deployerPubKeyBytesCh) {
        RevAddress!("fromPublicKey", deployerPubKeyBytes, *revAddrCh) |
        for (@deployerRevAddr <- revAddrCh) {
          log!({ "deployer REV address": deployerRevAddr, "pubKeyBytes": deployerPubKeyBytes, "deployerId": *deployerId }) |
          return!(deployerRevAddr)
        }
      }
    }
  }
}
