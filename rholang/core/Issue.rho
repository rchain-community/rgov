// @title Voting with liquid delegation.
// originally from https://github.com/rchain-community/rchain-api/blob/master/examples/voting-locker/chairRole.rho
new 
cliChannel,
Issue,
deployId,
trace(`rho:rchain:deployId`),
stdout(`rho:io:stdout`)
in {
  new insertArbitrary(`rho:registry:insertArbitrary`), uriCh in {
    insertArbitrary!(bundle+{*Issue}, *uriCh) | for(@uri <- uriCh) {
      stdout!(["#define $Issue", uri]) |
      cliChannel!(["#define", "Issue", uri])
      |
      deployId!(uri)
    }
  }
  |

    contract Issue(@proposalNames , return, log) = {
      new admin, tally, voterCh in {
        log!("creating ballot") |
        log!("Test of redeploy") |
        return!(bundle+{*admin}, bundle+{*tally}) |
        voterCh!({}) |

        contract admin(@"giveRightToVote", @name, return, log) = {
          // voter names must be unique, a public key is suggested.
          new voter, voteCh, delegateCh in {
            log!({"admin": *admin, "gives right to vote": *voter}) |
            voteCh!(Nil) |
            delegateCh!(Nil) |
            //TODO assign default deligate if any
            for ( @voters <- voterCh ) {
              if (voters.get(name) != Nil ) {
                log!("user already added, returning existing voter capability.") |
                voterCh!(voters) |
                return!(bundle+{voters.get(name)})
              } else {
                return!(bundle+{*voter}) |
                voterCh!(voters.union({name: *voter}))
              }
            } |
            contract voter(@"vote", @proposal, return, log) = {
              if((proposalNames.union(Set(Nil))).contains(proposal) == true)
              {
                log!("valid proposal") |
                for ( @oldvote <- voteCh ) {
                  log!(["oldvote was",oldvote]) |
                  log!(["newvote is",proposal]) |
                  return!(["oldvote was",oldvote]) |
                  return!(["newvote is",proposal]) |
                  voteCh!(proposal)
                }
              } else
              {
                log!({"unknown proposal": proposal}) |
                return!({"unknown proposal": proposal, "valid proposals": proposalNames})
              }
            } |
            contract voter(@"choice", @priorDelegates, return, log) = {
              log!({"proposals": proposalNames.toList(),"name": name}) |
              for ( @vote <<- voteCh ) {
                log!(["vote",vote])|
                if ( vote == Nil ) {
                  for ( @delegate <<- delegateCh) {
                    for ( @voters <<- voterCh ) {
                      log!(["delegate",delegate]) |
                      if (delegate == Nil or priorDelegates.contains(delegate) or voters.get(delegate) == Nil ) {
                        return!(Nil)
                      } else {
                        log!([name,  " -> ", delegate, voters.get(delegate)]) |
                        @{voters.get(delegate)}!("choice", priorDelegates.add(delegate), *return, *log)
                      }
                    }
                  }
                } else
                {
                  log!([name, vote]) |
                  return!(vote)
                }
              }
            } |
            contract voter(@"delegate", @delegate, ack, log) = {
              // name s.b. unique, public key suggested.
              for ( @prior <- delegateCh ) {
                log!((name, "delegates to", delegate)) |
                ack!(true) |
                delegateCh!(delegate)
              }
            }
          }
        } |
        contract tally(return, log) = {
          new countCh, loop in { countCh!({}) |
          log!("tally") |
          for ( @voters <<- voterCh ) {
            log!(["voters", voters]) |
            loop!(voters, *return) |

            contract loop(@rest, ack) = {
              new ret in {
                log!("loop") |
                match rest {
                  {} => {
                    log!("end") |
                    for ( counts <- countCh ) {
                      log!(["counts", *counts])  |
                      return!(["counts",*counts]) |
                      return!("done")
                    }
                  }
                  {name: *voter, ...tail} => {
                    log!(["voter", name]) |
                    voter!("choice", Set(), *ret, *log) |
                    for (@vote <- ret; @counts <- countCh ) {
                      trace!([name,vote]) |
                      log!([name, vote]) |
                      log!(["counts", counts]) |
                      countCh!(counts.set(vote,counts.getOrElse(vote,0) + 1 ) ) |
                      loop!(tail, *ack)
                    }
                  }
                  _ => log!(["junk",rest])
                }
              }
            }
          }
        }
      }
    }
  }
  |
  new bCh, v1Ch, v2Ch, v3Ch, v4Ch in {
    trace!("creating Issue") |
    Issue!(Set("Lincoln", "Douglas"), *bCh, *trace) |
    for (admin, tally <- bCh) {
      trace!(["Issue returned", *admin, *tally]) |
      admin!("giveRightToVote", "Owans", *v1Ch, *trace) |
      admin!("giveRightToVote", "jimscarver", *v2Ch, *trace) |
      admin!("giveRightToVote", "aviation_hacker", *v3Ch, *trace) |
      admin!("giveRightToVote", "momchilov", *v4Ch, *trace) |
      for(v1 <- v1Ch; v2 <- v2Ch; v3 <- v3Ch; v4 <- v4Ch) {
        v3!("delegate", "jimscarver", *v2Ch, *trace) |
        v2!("delegate", "Owens", *v1Ch, *trace) |
        v2!("delegate", "Owans", *v4Ch, *trace) |
        for(_ <- v2Ch; _ <- v1Ch; _ <- v4Ch) {
          trace!("voting.") |
          v1!("vote", "Lincoln", *v1Ch, *trace) |
          v1!("vote", "Douglas", *v2Ch, *trace) |
          v1!("vote", "Abe Lincoln", *v3Ch, *trace) |
          v4!("vote", "Lincoln", *v4Ch, *trace) |
          for(_ <- v1Ch; _ <- v2Ch; _ <- v3Ch; _ <- v4Ch) {
            trace!("votes done") |
            tally!(*bCh, *trace) |
            for(@w <- bCh) {
              trace!({"tally": w}, *trace)
            }
          }
        }
      }
    }
  }
}
