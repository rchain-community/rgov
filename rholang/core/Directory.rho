new
  cliChannel,
  deployId,
  stdout(`rho:io:stdout`),
  directory
in {
  contract directory(capabilities) = {
    directory!(Nil, *capabilities)
  } |
  contract directory(ParentReadCap, capabilities) = {
    new
      mapCh,
      read,
      write,
      grant
    in {
      mapCh!({}) |
      capabilities!({
        "read": bundle+{*read},
        "write": bundle+{*write},
        "grant": bundle+{*grant}
      }) |
      contract grant(@key, ret) = {
        new writekey in {
          contract writekey(@value, result) = {
            write!(key, value, *result)
          } |
          ret!(*writekey)
        }
      } |
      contract read(return) = {
        for ( map <<- mapCh ) {
          if (*map == {} ) {
            if (*ParentReadCap != Nil) {
              ParentReadCap!(*return)
            } else {
              return!({})
            }
          } else {
            return!(*map)
          }
        }
      } |
      contract read(@key, return) = {
        for ( map <<- mapCh ) {
          if (*map == {}) {
            if(*ParentReadCap != Nil) {
              ParentReadCap!(key, *return)
            } else {
              return!(Nil)
            }
          } else {
            return!(*map.get(key))
          }
        }
      } |
      contract write(@key,@value, ret) = {
        for ( map <- mapCh ) {
          if ( value == Nil ) {
            mapCh!(*map.delete(key)) |
            for (updated <<- mapCh) {
              stdout!(["Updated", *updated]) |
              ret!([key,"deleted"])
            }
          } else {
            mapCh!(*map.set(key,value)) |
            for (updated <<- mapCh) {
              stdout!(["Updated", *updated]) |
              ret!([key,value,"added"])
            }
          }
        }
      }
    }
  } |
  new stdout(`rho:io:stdout`), lookup(`rho:registry:lookup`), insertArbitrary(`rho:registry:insertArbitrary`),
    uriCh, read, write, ret, ack in {
    insertArbitrary!(bundle+{*directory},*uriCh) |
    for (@uri <- uriCh ) {
      stdout!(["#define", "Directory", uri]) |
      cliChannel!(["#define", "Directory", uri])
    } |
    directory!(Nil, *ret) |
    for ( @{"read": read, "write": write, "grant": grant, ..._ } <- ret ) {
      stdout!("got capabilities.") |
      @write!("hello","world", *ack) |
      @write!("this","that", *ack) |
      @grant!("hello", *ret) |
      for(_ <- ack ) { Nil } |
      for( hello <- ret; _ <- ack ) {
        stdout!("got grant.") |
        @read!(*ret) |
        for ( amap <- ret ) {
          stdout!(*amap) |
          @write!("this",Nil, *ack) | /* delete a key */
          hello!("galaxy", *ret) |
          for ( _ <- ack; _ <- ret ) {
            @read!("hello",*stdout) |
            @read!(*stdout)
          }
        }
      }
    }
  }
}
