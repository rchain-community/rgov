new 
cliChannel,
log(`rho:rchain:deployId`),
CrowdFund,
lookup(`rho:registry:lookup`),
insertArbitrary(`rho:registry:insertArbitrary`),
blockData(`rho:block:data`),
loCh, riCh
in {
  lookup!(`rho:lang:listOps`, *loCh) |
  lookup!(`rho:id:961h8n36ikxz4yxxfye898wh7or3d37fbp1yddmsei1rw64hcyzjmf`, *riCh) |
  for (@(_, *ListOps) <- loCh; revIssuer <- riCh) {
    log!(["lookup:", { "ListOps": *ListOps.toByteArray(), "revIssuer": *revIssuer.toByteArray(), "Nil": Nil.toByteArray() }]) |

    /**
     * @typedef {(true, T) | (false, unknown)} Result<T>
     *
     * TODO: parameterize issuer, esp for testing.
     * TODO: add minimum pledge threshold to guard against
     *       having to spend more to withdraw pledges
     *       than they are worth. (CRITICAL SECURITY ISSUE)
     */
    contract CrowdFund(
      @{ target /\ Int }, // target pledge target in 10^-8 REV
      @{ deadline /\ Int }, // deadline compared to block timestamp
      ret, // @returns {{ "beneficiarySeat": BeneficiarySeat, "publicFacet": PublicFacet }}
    ) = {
      new beneficiarySeat, publicFacet, pledgesCh, checkPledgeTarget, checkDeadline, ContributorSeat in {
        ret!({ "beneficiarySeat": bundle+{*beneficiarySeat}, "publicFacet": bundle+{*publicFacet} }) |

        /**
         * @typedef {{balance: NatT, pledges: Purse[]}} Holdings
         */
        /** @type { ChannelT<Holdings>} */
        pledgesCh!({ "balance": 0, "pledges": [] }) |

        contract checkPledgeTarget(
          @{ met /\ Bool }, // sense of the test
          @{ message /\ String}, // in case of failure
          ret, // Int current pledge total
        ) = {
          for (@{ "balance": pledges, ..._ } <<- pledgesCh) {
            if ((pledges >= target) == met) {
              ret!((true, pledges))
            } else {
              ret!((false, { "message": message, "pledges": pledges, "target": target }))
            }
          }
        } |
          
        contract checkDeadline(
          @{ met /\ Bool }, // sense of the test
          @{ message /\ String}, // in case of failure
          ret, // Int current block time
        ) = {
          new bCh in {
            blockData!(*bCh) | for(_, @now, _ <- bCh) {
              if ((now >= deadline) == met) {
                ret!((true, now))
              } else {
                ret!((false, { "message": message, "deadline": deadline, "now": now }))
              }
            }
          }
        } |

        /**
         * @param {Purse} pledge - verified by caller, publicFacet
         */
        contract ContributorSeat(pledge, ret) = {
          log!(["ContributorSeat", *pledge.toByteArray()]) |
          new self in {
            ret!(bundle+{*self}) |
            /**
             * @return {Result<Purse>}
             */
            contract self(@"withdraw", ret) = {
              log!("@@withdraw()") |
              new tCh, dCh in {
                checkPledgeTarget!(false, "funding target reached", *tCh) |
                checkDeadline!(true, "deadline not reached", *dCh) |
                for (@t <- tCh; @d <- dCh) {
                  log!(["@@withdraw checks", t, d]) |
                  match (t, d) {
                    ((true, _), (true, _)) => ret!((true, *pledge))
                    ((false, problem), _) => ret!((false, problem))
                    (_, (false, problem)) => ret!((false, problem))
                  }
                }
              }
            }
          }
        } |

        /**
         * @returns { Result<{ benefit: Purse, problems: Problem[] }> }
         */
        contract beneficiarySeat(@"claim", ret) = {
          new tCh in {
            checkPledgeTarget!(true, "funding target not reached", *tCh) | for (@t <- tCh) {
              match t {
                (false, problem) => ret!((false, problem))
                (true, _) => {
                  new bCh, psCh, combine in {
                    revIssuer!("makeEmptyPurse", *bCh) | for (benefit <- bCh) {
                      // commit point
                      for (@{ "pledges": pledges, ..._} <- pledgesCh) {
                        contract combine(pledge, @problems, ret) = {
                          new dCh in {
                            benefit!("deposit", *pledge, *dCh) | for (@(ok, x) <- dCh) {
                              if(ok == false) {
                                ret!(problems ++ [x])
                              } else {
                                ret!(problems)
                              }
                            }
                          }
                        } |
                        ListOps!("fold", pledges, [], *combine, *psCh) | for (@problems <- psCh) {
                          pledgesCh!({ "balance": 0, "pledges": [] }) |
                          ret!({ "benefit": *benefit, "problems": problems })
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } |

        /**
         * @returns { {terms: {target: NatT, deadline: Timestamp}, pledges: NatT} }
         */
        contract publicFacet(@"status", ret) = {
          new psCh in {
            for (@{"balance": pledges} <<- pledgesCh) {
              ret!({ "terms": { "target": target, "deadline": deadline }, "pledges": pledges })
            }
          }
        } |

        /**
         * @param {unknown} allegedPayment
         * @returns {Result<ContributorSeatT>}
         *
         * @typedef {{
         *   withdraw: () => Result<Purse>
         * }} ContributorSeatT
         */
        contract publicFacet(@"contribute", allegedPayment, ret) = {
          log!("@@contribute") |
          new plCh, depCh, csCh, balCh in {
            revIssuer!("makeEmptyPurse", *plCh) | for (pledge <- plCh) {
              log!("@@makeEmptyPurse ok") |
              pledge!("deposit", *allegedPayment, *depCh) | for (@(ok, x) <- depCh) {
                log!(["@@deposit", ok]) |
                if (ok) {
                  ContributorSeat!(*pledge, *csCh) | for (contributorSeat <- csCh) {
                    for(@{ "balance": balance, "pledges": pledges } <- pledgesCh) {
                      pledge!("getBalance", *balCh) | for (@pbal <- balCh) {
                        pledgesCh!({
                          // TODO: refund in case of overflow?
                          "balance": balance + pbal,
                          "pledges": pledges ++ [*pledge]
                        }) |
                        ret!((true, *contributorSeat))
                      }
                    }
                  }
                } else {
                  ret!((false, x))
                }
              }
            }
          }
        }
      }
    } |

    match ((100 /* really 8 zeros, but for testing...*/, 24 * 60 * 60 * 1000)) {
      (REV, DAY) => {
        new bCh, cfCh in {
          blockData!(*bCh) | for(_, @t0, _ <- bCh) {
            log!(["testing. now:", t0, t0 + 14 * DAY]) |

            CrowdFund!(100, t0 + 10, *cfCh) |
            for (@{ "beneficiarySeat": *beneficiarySeat, "publicFacet": *publicFacet } <- cfCh) {
              log!(["fund:", { "beneficiarySeat": *beneficiarySeat.toByteArray(), "publicFacet": *publicFacet.toByteArray() }]) |

              new tCh in {
                beneficiarySeat!("claim", *tCh) | for (@result <- tCh) { log!(["claim:", result]) }
              } |

              new tCh, apCh, asCh, wdCh in {
                revIssuer!("makeEmptyPurse", *apCh) | for (alicePurse <- apCh) {
                  log!("made purse for alice") |
                  publicFacet!("contribute", *alicePurse, *asCh) | for (@(ok, *aliceSeat) <- asCh) {
                    log!(["alice contributed 0 TODO: non-zero", ok]) |
                    new tCh in {
                      beneficiarySeat!("claim", *tCh) | for (@result <- tCh) { log!(["@@claim after alice:", result]) }
                    } |
                    aliceSeat!("withdraw", *wdCh) | for (@result <- wdCh) {
                      log!(["@@withdraw got", result]) |
                      new iCh in {
                        insertArbitrary!(bundle+{*CrowdFund}, *iCh) |
                        for (@cfUri <- iCh) {
                          log!(["tests passed; inserted CrowdFund at", cfUri])
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
